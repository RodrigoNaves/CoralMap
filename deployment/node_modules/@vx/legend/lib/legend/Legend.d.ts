import React from 'react';
import { BaseInput, BaseOutput, ScaleType, FormattedLabel, LabelFormatter, LabelFormatterFactory, LegendShape as LegendShapeType } from '../../../lib/types';
declare type FlexDirection = 'inherit' | 'initial' | 'revert' | 'unset' | 'column' | 'column-reverse' | 'row' | 'row-reverse';
export declare type LegendProps<Datum extends BaseInput, Output extends BaseOutput, Scale extends ScaleType<Datum, Output> = ScaleType<Datum, Output>> = {
    /** Optional render function override. */
    children?: (labels: FormattedLabel<Datum, Output>[]) => React.ReactNode;
    /** Classname to be applied to legend container. */
    className?: string;
    /** Styles to be applied to the legend container. */
    style?: React.CSSProperties;
    /** Legend domain. */
    domain?: Datum[];
    /** Width of the legend shape. */
    shapeWidth?: string | number;
    /** Height of the legend shape. */
    shapeHeight?: string | number;
    /** Margin of the legend shape. */
    shapeMargin?: string | number;
    /** Flex-box alignment of legend item labels. */
    labelAlign?: string;
    /** @TODO handle object type? */
    scale: Scale;
    /** Flex-box flex of legend item labels. */
    labelFlex?: string | number;
    /** Margin of legend item labels. */
    labelMargin?: string | number;
    /** Margin of legend items. */
    itemMargin?: string | number;
    /** Flex direction of the legend itself. */
    direction?: FlexDirection;
    /** Flex direction of legend items. */
    itemDirection?: FlexDirection;
    /** Legend item fill accessor function. */
    fill?: (label: FormattedLabel<Datum, Output>) => string | number | undefined;
    /** Legend item size accessor function. */
    size?: (label: FormattedLabel<Datum, Output>) => string | number | undefined;
    /** Legend shape string preset or Element or Component. */
    shape?: LegendShapeType<Datum, Output>;
    /** Styles applied to legend shapes. */
    shapeStyle?: (label: FormattedLabel<Datum, Output>) => React.CSSProperties;
    /** Given a legend item and its index, returns an item label. */
    labelFormat?: LabelFormatter<Datum>;
    /** Given the legend scale and labelFormatter, returns a label with datum, index, value, and label. */
    labelTransform?: LabelFormatterFactory<Datum, Output, Scale>;
};
export default function Legend<Datum extends BaseInput, Output extends BaseOutput, Scale extends ScaleType<Datum, Output> = ScaleType<Datum, Output>>({ className, style, scale, shape, domain: inputDomain, fill, size, labelFormat, labelTransform, shapeWidth, shapeHeight, shapeMargin, shapeStyle, labelAlign, labelFlex, labelMargin, itemMargin, direction, itemDirection, children, ...legendItemProps }: LegendProps<Datum, Output, Scale>): JSX.Element;
export {};
//# sourceMappingURL=Legend.d.ts.map