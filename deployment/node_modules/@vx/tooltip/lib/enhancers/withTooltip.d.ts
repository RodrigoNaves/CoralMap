import React from 'react';
export declare type WithTooltipProvidedProps<TooltipData = {}> = {
    tooltipOpen: boolean;
    tooltipLeft?: number;
    tooltipTop?: number;
    tooltipData?: TooltipData;
    updateTooltip: (args: UpdateTooltipArgs<TooltipData>) => void;
    showTooltip: (args: ShowTooltipArgs<TooltipData>) => void;
    hideTooltip: () => void;
};
declare type WithTooltipState<TooltipData> = Pick<WithTooltipProvidedProps<TooltipData>, 'tooltipOpen' | 'tooltipLeft' | 'tooltipTop' | 'tooltipData'>;
declare type ShowTooltipArgs<TooltipData> = Omit<WithTooltipState<TooltipData>, 'tooltipOpen'>;
declare type UpdateTooltipArgs<TooltipData> = WithTooltipState<TooltipData>;
declare type WithTooltipContainerProps = {
    style: React.CSSProperties;
};
export default function withTooltip<BaseComponentProps = {}, TooltipData = {}>(BaseComponent: React.ComponentType<BaseComponentProps & WithTooltipProvidedProps<TooltipData>>, containerProps?: WithTooltipContainerProps): {
    new (props: Readonly<BaseComponentProps>): {
        state: {
            tooltipOpen: boolean;
            tooltipLeft: undefined;
            tooltipTop: undefined;
            tooltipData: undefined;
        };
        updateTooltip: ({ tooltipOpen, tooltipLeft, tooltipTop, tooltipData, }: Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">) => void;
        showTooltip: ({ tooltipLeft, tooltipTop, tooltipData }: Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, "tooltipLeft" | "tooltipTop" | "tooltipData">) => void;
        hideTooltip: () => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">(state: Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData"> | ((prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, props: Readonly<BaseComponentProps>) => Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData"> | Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, K> | null) | Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<BaseComponentProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<BaseComponentProps>, prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>): any;
        componentDidUpdate?(prevProps: Readonly<BaseComponentProps>, prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<BaseComponentProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<BaseComponentProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): void;
    };
    new (props: BaseComponentProps, context?: any): {
        state: {
            tooltipOpen: boolean;
            tooltipLeft: undefined;
            tooltipTop: undefined;
            tooltipData: undefined;
        };
        updateTooltip: ({ tooltipOpen, tooltipLeft, tooltipTop, tooltipData, }: Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">) => void;
        showTooltip: ({ tooltipLeft, tooltipTop, tooltipData }: Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, "tooltipLeft" | "tooltipTop" | "tooltipData">) => void;
        hideTooltip: () => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">(state: Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData"> | ((prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, props: Readonly<BaseComponentProps>) => Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData"> | Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, K> | null) | Pick<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<BaseComponentProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<BaseComponentProps>, prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>): any;
        componentDidUpdate?(prevProps: Readonly<BaseComponentProps>, prevState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<BaseComponentProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<BaseComponentProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<BaseComponentProps>, nextState: Readonly<Pick<WithTooltipProvidedProps<TooltipData>, "tooltipOpen" | "tooltipLeft" | "tooltipTop" | "tooltipData">>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
//# sourceMappingURL=withTooltip.d.ts.map