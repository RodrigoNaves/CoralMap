var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import i18next from "i18next";
import { clone } from "lodash-es";
import { action, computed, observable, runInAction } from "mobx";
import ImageryLayerFeatureInfo from "terriajs-cesium/Source/Scene/ImageryLayerFeatureInfo";
import isDefined from "../../../Core/isDefined";
import MapboxVectorTileImageryProvider from "../../../Map/MapboxVectorTileImageryProvider";
import CatalogMemberMixin from "../../../ModelMixins/CatalogMemberMixin";
import MappableMixin from "../../../ModelMixins/MappableMixin";
import UrlMixin from "../../../ModelMixins/UrlMixin";
import LegendTraits, { LegendItemTraits } from "../../../Traits/TraitsClasses/LegendTraits";
import MapboxVectorTileCatalogItemTraits from "../../../Traits/TraitsClasses/MapboxVectorTileCatalogItemTraits";
import CreateModel from "../../Definition/CreateModel";
import createStratumInstance from "../../Definition/createStratumInstance";
import LoadableStratum from "../../Definition/LoadableStratum";
import StratumOrder from "../../Definition/StratumOrder";
class MapboxVectorTileLoadableStratum extends LoadableStratum(MapboxVectorTileCatalogItemTraits) {
    constructor(item) {
        super();
        this.item = item;
    }
    duplicateLoadableStratum(newModel) {
        return new MapboxVectorTileLoadableStratum(newModel);
    }
    static async load(item) {
        return new MapboxVectorTileLoadableStratum(item);
    }
    get legends() {
        return [
            createStratumInstance(LegendTraits, {
                items: [
                    createStratumInstance(LegendItemTraits, {
                        color: this.item.fillColor,
                        outlineColor: this.item.lineColor,
                        title: this.item.name
                    })
                ]
            })
        ];
    }
}
MapboxVectorTileLoadableStratum.stratumName = "MapboxVectorTileLoadable";
__decorate([
    computed
], MapboxVectorTileLoadableStratum.prototype, "legends", null);
StratumOrder.addLoadStratum(MapboxVectorTileLoadableStratum.stratumName);
class MapboxVectorTileCatalogItem extends MappableMixin(UrlMixin(CatalogMemberMixin(CreateModel(MapboxVectorTileCatalogItemTraits)))) {
    constructor() {
        super(...arguments);
        this.forceProxy = true;
    }
    get type() {
        return MapboxVectorTileCatalogItem.type;
    }
    get typeName() {
        return i18next.t("models.mapboxVectorTile.name");
    }
    async forceLoadMetadata() {
        const stratum = await MapboxVectorTileLoadableStratum.load(this);
        runInAction(() => {
            this.strata.set(MapboxVectorTileLoadableStratum.stratumName, stratum);
        });
    }
    get imageryProvider() {
        if (this.url === undefined || this.layer === undefined) {
            return;
        }
        return new MapboxVectorTileImageryProvider({
            url: this.url,
            layerName: this.layer,
            styleFunc: (opts => () => ({
                ...opts,
                lineJoin: "miter",
                lineWidth: 1
            }))({ fillStyle: this.fillColor, strokeStyle: this.lineColor }),
            minimumZoom: this.minimumZoom,
            maximumNativeZoom: this.maximumNativeZoom,
            maximumZoom: this.maximumZoom,
            uniqueIdProp: this.idProperty,
            featureInfoFunc: this.featureInfoFromFeature,
            credit: this.attribution
        });
    }
    forceLoadMapItems() {
        return Promise.resolve();
    }
    get mapItems() {
        if (this.isLoadingMapItems || this.imageryProvider === undefined) {
            return [];
        }
        return [
            {
                imageryProvider: this.imageryProvider,
                show: this.show,
                alpha: this.opacity,
                clippingRectangle: this.clipToRectangle
                    ? this.cesiumRectangle
                    : undefined
            }
        ];
    }
    featureInfoFromFeature(feature) {
        const featureInfo = new ImageryLayerFeatureInfo();
        if (isDefined(this.nameProperty)) {
            featureInfo.name = feature.properties[this.nameProperty];
        }
        featureInfo.properties = clone(feature.properties);
        featureInfo.data = {
            id: feature.properties[this.idProperty]
        }; // For highlight
        return featureInfo;
    }
}
MapboxVectorTileCatalogItem.type = "mvt";
__decorate([
    observable
], MapboxVectorTileCatalogItem.prototype, "forceProxy", void 0);
__decorate([
    computed
], MapboxVectorTileCatalogItem.prototype, "imageryProvider", null);
__decorate([
    computed
], MapboxVectorTileCatalogItem.prototype, "mapItems", null);
__decorate([
    action.bound
], MapboxVectorTileCatalogItem.prototype, "featureInfoFromFeature", null);
export default MapboxVectorTileCatalogItem;
//# sourceMappingURL=MapboxVectorTileCatalogItem.js.map