var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import CatalogMemberTraits from "./CatalogMemberTraits";
import FeatureInfoTraits from "./FeatureInfoTraits";
import LayerOrderingTraits from "./LayerOrderingTraits";
import MappableTraits from "./MappableTraits";
import mixTraits from "../mixTraits";
import primitiveTrait from "../Decorators/primitiveTrait";
import RasterLayerTraits from "./RasterLayerTraits";
import UrlTraits from "./UrlTraits";
export default class MapboxVectorTileCatalogItemTraits extends mixTraits(LayerOrderingTraits, FeatureInfoTraits, UrlTraits, MappableTraits, CatalogMemberTraits, RasterLayerTraits) {
    constructor() {
        super(...arguments);
        this.lineColor = "#000000";
        this.fillColor = "rgba(0,0,0,0)";
        this.idProperty = "FID";
        this.maximumNativeZoom = 12;
        this.maximumZoom = 28;
        this.minimumZoom = 0;
    }
}
__decorate([
    primitiveTrait({
        type: "string",
        name: "lineColor",
        description: "The outline color of the features, specified as a CSS color string."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "lineColor", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "fillColor",
        description: "The fill color of the features, specified as a CSS color string."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "fillColor", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "layer",
        description: "The name of the layer to use the Mapbox vector tiles."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "layer", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "idProperty",
        description: "The name of the property that is a unique ID for features."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "idProperty", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "nameProperty",
        description: "The name of the property from which to obtain the name of features."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "nameProperty", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "maximumNativeZoom",
        description: "The maximum zoom level for which tile files exist."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "maximumNativeZoom", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "maximumZoom",
        description: "The maximum zoom level that can be displayed by using the data in the  MapboxVectorTileCatalogItem#maximumNativeZoom tiles."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "maximumZoom", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "minimumZoom",
        description: "The minimum zoom level for which tile files exist."
    })
], MapboxVectorTileCatalogItemTraits.prototype, "minimumZoom", void 0);
//# sourceMappingURL=MapboxVectorTileCatalogItemTraits.js.map