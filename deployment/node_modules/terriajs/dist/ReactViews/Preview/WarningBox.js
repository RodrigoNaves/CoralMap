import i18next from "i18next";
import { runInAction } from "mobx";
import React from "react";
import Box from "../../Styled/Box";
import { RawButton } from "../../Styled/Button";
import Spacing from "../../Styled/Spacing";
import { TextSpan } from "../../Styled/Text";
import parseCustomMarkdownToReact from "../Custom/parseCustomMarkdownToReact";
// Hard code colour for now
const warningColor = "#f69900";
const showFeedback = (viewState) => {
    runInAction(() => {
        viewState.feedbackFormIsVisible = true;
        viewState.terria.notificationState.dismissCurrentNotification();
    });
};
const showErrorNotification = (viewState, error) => {
    runInAction(() => {
        error.showDetails = true;
    });
    viewState.terria.raiseErrorToUser(error, undefined, true);
};
const WarningBox = props => (React.createElement(Box, { backgroundColor: warningColor, rounded: true, padded: true },
    React.createElement(Spacing, { right: 1 }),
    React.createElement(WarningIcon, null),
    React.createElement(Spacing, { right: 2 }),
    React.createElement(Box, { backgroundColor: "#ffffff", rounded: true, fullWidth: true, paddedRatio: 3 }, props.error ? (React.createElement("div", null,
        parseCustomMarkdownToReact(`### ${props.error.title}`),
        parseCustomMarkdownToReact(props.error.message),
        props.viewState &&
            Array.isArray(props.error.originalError) &&
            props.error.originalError.length > 0 ? (React.createElement("div", null,
            React.createElement(RawButton, { activeStyles: true, onClick: () => showErrorNotification(props.viewState, props.error) },
                React.createElement(TextSpan, { primary: true }, "See details")))) : null,
        React.createElement(RawButton, { activeStyles: true, onClick: () => showFeedback(props.viewState) },
            React.createElement(TextSpan, { primary: true }, parseCustomMarkdownToReact(i18next.t("models.raiseError.notificationFeedback")))))) : (props.children))));
// Equilateral triangle
const WarningIcon = () => (React.createElement("p", { css: `
      width: 0px;
      height: 0px;
      text-indent: -2px;
      border-left: 12px solid transparent;
      border-right: 12px solid transparent;
      border-bottom: 20px solid white;
      font-weight: bold;
      line-height: 25px;
      user-select: none;
    ` }, "!"));
export default WarningBox;
//# sourceMappingURL=WarningBox.js.map