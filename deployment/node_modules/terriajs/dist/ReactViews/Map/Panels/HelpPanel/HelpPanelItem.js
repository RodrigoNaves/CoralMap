var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import classNames from "classnames";
import { observer } from "mobx-react";
import PropTypes from "prop-types";
import React from "react";
import { withTranslation } from "react-i18next";
import styled, { withTheme } from "styled-components";
import { Category, HelpAction } from "../../../../Core/AnalyticEvents/analyticEvents";
import Box from "../../../../Styled/Box";
import Icon, { StyledIcon } from "../../../../Styled/Icon";
import Text from "../../../../Styled/Text";
import { useTranslationIfExists } from "./../../../../Language/languageHelpers";
import Styles from "./help-panel.scss";
import HelpVideoPanel from "./HelpVideoPanel";
let HelpPanelItem = class HelpPanelItem extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const { icon } = this.props.content;
        const MenuIconWrapper = styled(Box).attrs({
            centered: true
        }) `
      flex-shrink: 0;
      width: 64px;
      height: 64px;
      display: table-cell;
      vertical-align: middle;
      padding-left: 25px;
    `;
        const itemSelected = this.props.viewState.selectedHelpMenuItem === this.props.content.itemName;
        const className = classNames({
            [Styles.panelItem]: true,
            [Styles.isSelected]: itemSelected
        });
        // `content.icon` is user defined and can possibly force the UI to lookup a
        // nonexistant icon.
        const iconGlyph = Icon.GLYPHS[icon] || Icon.GLYPHS.video;
        const title = useTranslationIfExists(this.props.content.title);
        return (React.createElement("div", null,
            React.createElement("button", { className: className, onClick: () => {
                    var _a;
                    (_a = this.props.terria.analytics) === null || _a === void 0 ? void 0 : _a.logEvent(Category.help, HelpAction.itemSelected, title);
                    this.props.viewState.selectHelpMenuItem(this.props.content.itemName);
                } },
                React.createElement(Box, { left: true, fullHeight: true, css: `
              display: table-row;
              text-align: left;
            ` },
                    React.createElement(MenuIconWrapper, null,
                        React.createElement(StyledIcon, { styledWidth: "27px", fillColor: this.props.theme.textDark, glyph: iconGlyph })),
                    React.createElement(Text, { semiBold: true, extraLarge: true, uppercase: true, textDark: true, css: `
                padding-right: 25px;
                padding-left: 5px;
                display: table-cell;
                vertical-align: middle;
                line-height: 17px;
              ` }, title))),
            React.createElement(HelpVideoPanel, { terria: this.props.terria, viewState: this.props.viewState, content: this.props.content, itemString: this.props.content.itemName, paneMode: this.props.content.paneMode, markdownContent: this.props.content.markdownText, videoUrl: useTranslationIfExists(this.props.content.videoUrl), placeholderImage: useTranslationIfExists(this.props.content.placeholderImage) })));
    }
};
HelpPanelItem.displayName = "HelpPanelItem";
HelpPanelItem.propTypes = {
    terria: PropTypes.object.isRequired,
    viewState: PropTypes.object.isRequired,
    content: PropTypes.object.isRequired,
    theme: PropTypes.object,
    t: PropTypes.func.isRequired
};
HelpPanelItem = __decorate([
    observer
], HelpPanelItem);
export default withTranslation()(withTheme(HelpPanelItem));
//# sourceMappingURL=HelpPanelItem.js.map