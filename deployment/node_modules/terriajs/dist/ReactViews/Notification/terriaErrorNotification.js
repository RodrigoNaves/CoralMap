import i18next from "i18next";
import { runInAction } from "mobx";
import React from "react";
import TerriaError from "../../Core/TerriaError";
import Collapsible from "../Custom/Collapsible/Collapsible";
import parseCustomMarkdownToReact from "../Custom/parseCustomMarkdownToReact";
import Box from "../../Styled/Box";
import Spacing from "../../Styled/Spacing";
import { RawButton } from "../../Styled/Button";
import { Text, TextSpan } from "../../Styled/Text";
const ErrorsBox = (props) => {
    return (React.createElement(React.Fragment, null, props.errors.map((error, idx) => {
        var _a, _b;
        return (React.createElement(Box, { displayInlineBlock: true, css: {
                paddingLeft: "6px",
                borderLeft: "solid 1px rgba(255,255,255,.1)"
            }, key: idx }, error instanceof TerriaError ? (React.createElement(TerriaErrorBox, { error: error, depth: props.depth + 1 })) : (
        // Show error.message (as well as error.stack) if error.stack is defined
        React.createElement("div", null,
            error.stack ? React.createElement("pre", null, error.message) : null,
            React.createElement("pre", null, (_b = (_a = error.stack) !== null && _a !== void 0 ? _a : error.message) !== null && _b !== void 0 ? _b : error.toString())))));
    })));
};
const TerriaErrorBox = (props) => {
    return (React.createElement(React.Fragment, null,
        React.createElement(Text, { css: `
          p {
            margin: 5px 0px;
          }
        ` }, parseCustomMarkdownToReact(props.error.message)),
        React.createElement(Spacing, { bottom: 1 }),
        Array.isArray(props.error.originalError) &&
            props.error.originalError.length > 0 ? (props.depth === 0 ? (React.createElement(React.Fragment, null,
            React.createElement(Spacing, { bottom: 2 }),
            React.createElement(Collapsible, { btnRight: true, title: i18next.t("models.raiseError.developerDetails"), titleTextProps: { large: true }, bodyBoxProps: { padded: true }, isOpen: props.error.showDetails, onToggle: show => () => runInAction(() => (props.error.showDetails = show)) },
                React.createElement(ErrorsBox, { errors: props.error.originalError, depth: props.depth })))) : (React.createElement(ErrorsBox, { errors: props.error.originalError, depth: props.depth }))) : null));
};
export const terriaErrorNotification = (error) => (viewState) => {
    const showFeedback = () => {
        runInAction(() => {
            viewState.feedbackFormIsVisible = true;
            viewState.terria.notificationState.dismissCurrentNotification();
        });
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(TerriaErrorBox, { error: error, depth: 0 }),
        viewState.terria.configParameters.feedbackUrl ? (React.createElement(RawButton, { fullWidth: true, onClick: showFeedback, css: `
            text-align: left;
          ` },
            React.createElement(TextSpan, { textLight: true, bold: true, medium: true }, parseCustomMarkdownToReact(i18next.t("models.raiseError.notificationFeedback"))))) : (React.createElement(Text, null,
            "Please report it by sending an email to",
            " ",
            viewState.terria.supportEmail))));
};
//# sourceMappingURL=terriaErrorNotification.js.map