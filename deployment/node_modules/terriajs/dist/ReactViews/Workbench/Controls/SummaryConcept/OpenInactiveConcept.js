"use strict";
import classNames from "classnames";
import Concept from "../Concept";
import Icon from "../../../../Styled/Icon";
import React from "react";
import createReactClass from "create-react-class";
import PropTypes from "prop-types";
import { withTranslation } from "react-i18next";
import Styles from "./summary-concept.scss";
const OpenInactiveConcept = createReactClass({
    displayName: "OpenInactiveConcept",
    propTypes: {
        rootConcept: PropTypes.object.isRequired,
        openInactiveConcept: PropTypes.object.isRequired,
        t: PropTypes.func.isRequired
    },
    cancel() {
        this.props.openInactiveConcept.isOpen = false;
    },
    back() {
        this.props.openInactiveConcept.isOpen = false;
        this.props.openInactiveConcept.parent.isOpen = true;
    },
    render() {
        const showControls = this.props.rootConcept.allowMultiple;
        const { t } = this.props;
        return (React.createElement("div", { className: Styles.section },
            React.createElement("div", { className: Styles.controls },
                React.createElement(If, { condition: showControls },
                    React.createElement("button", { className: Styles.btnClose, onClick: this.cancel }, t("concept.inactive.cancel")))),
            React.createElement("div", { className: Styles.heading },
                React.createElement(If, { condition: this.props.rootConcept !== this.props.openInactiveConcept },
                    React.createElement(If, { condition: showControls },
                        React.createElement("button", { className: Styles.btnBack, onClick: this.back },
                            React.createElement(Icon, { glyph: Icon.GLYPHS.left }))),
                    React.createElement("div", { className: classNames({ [Styles.indented]: showControls }) }, this.props.openInactiveConcept.name)),
                React.createElement(If, { condition: this.props.rootConcept === this.props.openInactiveConcept }, t("concept.inactive.newText"))),
            React.createElement("ul", { className: Styles.childrenList },
                React.createElement(For, { each: "child", index: "i", of: this.props.openInactiveConcept.items },
                    React.createElement(If, { condition: child.items && child.items.length > 0 },
                        React.createElement(ConceptParent, { concept: child, key: i })),
                    React.createElement(If, { condition: !child.items || child.items.length === 0 },
                        React.createElement("li", { className: Styles.items },
                            React.createElement("ul", { className: Styles.listReset },
                                React.createElement(Concept, { concept: child, key: i }))))))));
    }
});
const ConceptParent = createReactClass({
    displayName: "ConceptParent",
    propTypes: {
        concept: PropTypes.object.isRequired
    },
    open() {
        this.props.concept.isOpen = true;
        this.props.concept.parent.isOpen = false;
    },
    render() {
        return (React.createElement("li", null,
            React.createElement("div", { className: Styles.btnAddOpen, onClick: this.open },
                React.createElement("div", { className: Styles.controls },
                    React.createElement(Icon, { glyph: Icon.GLYPHS.closed })),
                React.createElement("div", { className: Styles.condition }, this.props.concept.name))));
    }
});
module.exports = withTranslation()(OpenInactiveConcept);
//# sourceMappingURL=OpenInactiveConcept.js.map