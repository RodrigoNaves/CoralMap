"use strict";
import classNames from "classnames";
import Icon from "../../../Styled/Icon";
import React from "react";
import createReactClass from "create-react-class";
import PropTypes from "prop-types";
import Styles from "./concept-viewer.scss";
const Concept = createReactClass({
    displayName: "Concept",
    propTypes: {
        concept: PropTypes.object.isRequired,
        hideName: PropTypes.bool,
        isLoading: PropTypes.bool
    },
    toggleOpen() {
        this.props.concept.toggleOpen();
    },
    toggleActive() {
        if (!this.props.isLoading) {
            this.props.concept.toggleActive();
        }
    },
    getColorStyle() {
        if (this.props.concept.color) {
            return { color: this.props.concept.color };
        }
    },
    getFillStyle() {
        if (this.props.concept.color) {
            return { fill: this.props.concept.color };
        }
    },
    render() {
        const concept = this.props.concept;
        const allowMultiple = concept.parent && concept.parent.allowMultiple;
        const classes = classNames(Styles.header, {
            [Styles.hasChildren]: concept.hasChildren,
            [Styles.isSelectable]: concept.isSelectable,
            [Styles.isLoading]: this.props.isLoading,
            [Styles.unSelectable]: concept.parent &&
                concept.parent.requireSomeActive &&
                isOnlyActiveSibling(concept)
        });
        // Renders the concept as a standard list of radio buttons or checkboxes (ie. not as an additive-condition).
        return (React.createElement("li", { style: this.getColorStyle() },
            React.createElement(If, { condition: !this.props.hideName && concept.name },
                React.createElement("div", { className: classes },
                    React.createElement("div", { className: Styles.btnGroup },
                        React.createElement(If, { condition: concept.hasChildren },
                            React.createElement("button", { type: "button", onClick: this.toggleOpen, style: this.getColorStyle(), className: Styles.btnToggleOpen, title: "open variable selection" }, concept.isOpen ? (React.createElement(Icon, { glyph: Icon.GLYPHS.showLess })) : (React.createElement(Icon, { glyph: Icon.GLYPHS.showMore })))),
                        React.createElement(If, { condition: concept.isSelectable },
                            React.createElement("button", { type: "button", onClick: this.toggleActive, style: this.getColorStyle(), className: Styles.btnToggleActive, title: "select variable" },
                                concept.isActive && allowMultiple && (React.createElement(Icon, { style: this.getFillStyle(), glyph: Icon.GLYPHS.checkboxOn })),
                                !concept.isActive && allowMultiple && (React.createElement(Icon, { style: this.getFillStyle(), glyph: Icon.GLYPHS.checkboxOff })),
                                concept.isActive && !allowMultiple && (React.createElement(Icon, { style: this.getFillStyle(), glyph: Icon.GLYPHS.radioOn })),
                                !concept.isActive && !allowMultiple && (React.createElement(Icon, { style: this.getFillStyle(), glyph: Icon.GLYPHS.radioOff }))))),
                    concept.name)),
            React.createElement(If, { condition: concept.isOpen },
                React.createElement("ul", { className: Styles.items },
                    React.createElement(For, { each: "child", index: "i", of: concept.items.filter(concept => concept.isVisible) },
                        React.createElement(Concept, { key: i, concept: child, allowMultiple: concept.allowMultiple, isLoading: this.props.isLoading }))))));
    }
});
/**
 * @param  {Concept} concept A concept.
 * @return {Boolean} Is this the only active child of its parent?
 * @private
 */
function isOnlyActiveSibling(concept) {
    return concept.parent.items.every(child => child === concept ? child.isActive : !child.isActive);
}
module.exports = Concept;
//# sourceMappingURL=Concept.js.map